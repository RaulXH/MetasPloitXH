#!/data/data/com.termux/files/usr/bin/bash 
#
#
#
#
#
#
#	Metasploit installer for termux
#
#
#
#
#	---------------------------------
#
#	[ RaulXH ] [ Termux ] [ Panamá ]
#
#	--------------------------------
#
#
#
YELOW="\e[0;50;93m"
AGUA="\e[0;50;36m"
WHITE="\e[0;50;37m"
RED="\e[0;50;91m"
GREEN="\e[0;50;32m"
MOR="\e[0;49;95m"
FORT="\e[0m"
declare -r XYELOW='\e[7;100;33m'
MSF=$PWD
MSFVERSION=6.0.55
declare -r TERMUX_MD5SUM_MSF=31a53730599ac7b014af6cc370ff93a8
NOOB=metasploit-framework
NAME="$MSFVERSION.tar.gz"
declare -r CONFIG="$PREFIX/etc/MSF"
msfpath=$PREFIX/opt/$NOOB
cd $HOME
banner(){
local -r W="\e[1;50;37m"
local -r G='\e[2;50;37m'
local -r R='\e[0;50;31m'
local -r FORT='\e[0m'
printf "${RED}
            _                _     _ _   
  _ __  ___| |_ __ _ ____ __| |___(_) |_ 
 | '  \/ -_)  _/ _ (_'-< '_ \ / _ \ |  _|
 |_|_|_\___|\__\__,_/__/ .__/_\___/_|\__|
                       |_| v: ${W}$MSFVERSION
${FORT}"                                             
}
BannerRuby(){
	printf "${MOR}
┬─┐┬ ┬┌┐ ┬ ┬
├┬┘│ │├┴┐└┬┘
┴└─└─┘└─┘ ┴${WHITE}V:2.7.0${FORT}
"
}
#clear
function ERROR()
{
	echo -e "\n${RED}[!] ${AGUA}There was an error in the installation ${RED}[!]${FORT}\n"
	rm -rf $CONFIG/$NAME
	rm -rf $NOOB
	rm -rf $PREFIX/msf*
	exit 0
}
trap ERROR 1 2 
Info_msf()
{
TEXT="$1" && U="$2"
printf "${XYELOW} $TEXT ${FORT}\n\n---------------------------------------\n${GREEN}%-12s ${WHITE}: Metasploit-framework\n${GREEN}%-12s ${WHITE}: 63M\n${GREEN}%-12s ${WHITE}: ${MSFVERSION} ${AGUA}$U\n${GREEN}%-12s ${WHITE}: Use for ethical purposes\n" 'Package' 'Size' 'Version' 'Note'
echo -e '---------------------------------------\n'
	
}
Install_MSF()
{
# Existentes
rm -rf $PREFIX/bin/msf* $PREFIX/opt/metasploit*
#
printf "\n${XYELOW}  Installing packages  ${FORT}\n\n"
pkg update -y && pkg upgrade -y 
pkg install -y libiconv zlib autoconf bison clang wget2 coreutils findutils git apr apr-util libffi libgmp libpcap postgresql readline libsqlite openssl libtool libxml2 libxslt ncurses pkg-config wget make  libgrpc termux-tools ncurses-utils ncurses unzip zip tar termux-elf-cleaner
clear
sleep 1
BannerRuby
#
# Ruby 3.0.2
#
BRed='\033[1;31m'
[[ -f $PREFIX/bin/ruby ]] && Ruby_Version=`ruby -v | cut -d' ' -f2`
[[ -f ~/ruby.deb ]] && rm -rf ~/ruby.deb
[[ $(dpkg --print-architecture) = 'aarch64' ]] && [[ ${Ruby_Version%%.*} -ne 2 ]] && printf "[ Downloading ruby 2.7.2 ]\n\n" && if ! curl --fail --retry 5 --retry-connrefused --retry-delay 5 --location \
	-o ruby.deb https://bit.ly/3GE2lck;
then
	printf "$BRed[ Error Download ruby 2.7.2, try again ]\e[0m\n\n"
	rm -rf ruby.deb
fi

[[ $(dpkg --print-architecture) = arm  ]] && [[ ${Ruby_Version%%.*} -ne 2 ]] && printf "[ Downloading ruby 2.7.2 ]\n\n" && if ! curl --fail --retry 5 --retry-connrefused --retry-delay 5 --location \
	-o ruby.deb https://bit.ly/3BzgFC9;
then
	printf "$BRed[ Error download ruby 2.7.2, try again ]\e[0m\n\n"
	rm -rf ruby.deb
fi
#[[ ! -f ruby.deb ]] && printf "[ Ruby not found! ]\n\n" && exit 1
dpkg -i ./ruby.deb && apt install -f
rm -rf ruby.deb
#
# end 
#
clear
banner
mkdir -p $PREFIX/opt/$NOOB
mkdir -p $CONFIG && cd ~
# Download and update
[[ ! -f $CONFIG/$NAME ]] && Info_msf $1 && rm -rf $CONFIG/* && if ! curl --fail --retry 5 --retry-connrefused --retry-delay 5 --location \
	-O "https://github.com/rapid7/metasploit-framework/archive/refs/tags/$MSFVERSION.tar.gz";
then 
	printf "\n${RED}[✗] ${WHITE}Incorrect download | check your internet ${RED}[✗]${FORT}\n\n"
	rm -rf $CONFIG/$NAME
	exit 0
fi
mv -f ~/${NAME} $CONFIG
until [[ $(md5sum $CONFIG/$NAME | awk '{print $1}') = "$TERMUX_MD5SUM_MSF" ]]
do
	printf "\n${RED}[✗] ${WHITE}Incorrect download | check your internet ${RED}[✗]${FORT}\n\n"
	rm -rf $CONFIG/$NAME
	exit 0
done
printf "[ \033[1;33mExtracting files'\033[0m ]\n\n"
tar zxf "$CONFIG/$NAME" --strip-components=1 \
        -C "$PREFIX"/opt/$NOOB
#
# 	Update and settings
#
Settings_Gemgs
}
Settings_Gemgs()
{
echo -e "\n${GREEN}[*] ${AGUA}  Setting up directories  ${GREEN}[*]${FORT}\n"
cd $msfpath
sleep 2
clear
banner
echo -e "\n${GREEN}[✓] ${AGUA}Gems and settings update ${GREEN}[✓]${FORT}\n"
if [ "$(gem list -i rubygems-update 2>/dev/null)" = "false" ]; then
	gem install --no-document --verbose rubygems-update
fi

update_rubygems &>/dev/null
until [[ $? -eq 0 ]]
do
	echo -e "${RED}[!] ${AGUA}Error de update_rubygems ${RED}[!]${FORT}\n"
	exit 1
done
echo -e "\n${WHITE}[✓] ${AGUA}Update_rubygems installed ${WHITE}[✓]${FORT}\n"
sleep 0.3
gem install --no-document --verbose bundle &>/dev/null
until [[ $? -eq 0 ]]
do
	echo -e "${RED}[!] ${AGUA}Error of bundle ${FORT}[!]${FORT}\n"
	exit 1
done
echo -e "\n${WHITE}[✓] ${AGUA}Bundle installed correctly ${WHITE}[✓]\n"
bundle config build.nokogiri --use-system-libraries &>/dev/null
sleep 0.3
bundle install -j3
echo -e "\n${AGUA}Gem Installed Correctly${FORT}\n"
echo -e "\n${WHITE}[✓] ${AGUA}Configured files, wait... ${WHITE}[✓]${FORT}\n"
sed -i "s@/etc/resolv.conf@$PREFIX/etc/resolv.conf@g" $msfpath/lib/net/dns/resolver.rb
find "$msfpath"  -type f -executable -print0 | xargs -0 -r termux-fix-shebang
find "$PREFIX"/lib/ruby/gems -type f -iname \*.so -print0 | xargs -0 -r termux-elf-cleaner
clear
echo -e "\n${WHITE}[*] ${AGUA}Creating database PostgreSQL${WHITE}[*]${FORT}\n"
mkdir -p "$msfpath"/config
cat <<- EOF > "$msfpath"/config/database.yml
production:
  adapter: postgresql
  database: msf_database
  username: msf
  password:
  host: 127.0.0.1
  port: 5432
  pool: 75
  timeout: 5
EOF
#
# PostgreSQL
# 
mkdir -p "$PREFIX"/var/lib/postgresql
sleep 0.3
pg_ctl -D "$PREFIX"/var/lib/postgresql stop > /dev/null 2>&1 || true
if  ! pg_ctl -D "$PREFIX"/var/lib/postgresql start --silent; then
	initdb "$PREFIX"/var/lib/postgresql
	[[ $(pg_checksums --check -D "$PREFIX/var/lib/postgresql" 2>/dev/null)  ]]  && pg_checksums --enable -D "${PREFIX}/var/lib/postgresql"
	pg_ctl -D "$PREFIX"/var/lib/postgresql start --silent
fi
if [ -z "$(psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='msf'")" ]; then
    createuser msf
fi
if [ -z "$(psql -l | grep msf_database)" ]; then
    createdb msf_database
fi
#
#
#
cat <<- OF > $PREFIX/bin/msfconsole
#!/data/data/com.termux/files/usr/bin/bash -e
SCRIPT_NAME=\$(basename "\$0")
METASPLOIT_PATH="\${PREFIX}/opt/metasploit-framework"
BIGDECIMAL=`find  \$PREFIX/lib/ruby/ -type f -iname 'bigdecimal.so'`
case "\$(uname -m)" in
aarch64)
export LD_PRELOAD="\${BIGDECIMAL}:\$LD_PRELOAD"
;;
arm*)
export LD_PRELOAD="\${BIGDECIMAL}:\$LD_PRELOAD"
;;
i686)
export LD_PRELOAD="\${BIGDECIMAL}:\$LD_PRELOAD"
;;
x86_64)
export LD_PRELOAD="\${BIGDECIMAL}:\$LD_PRELOAD"
;;
*)
;;
esac
case "\$SCRIPT_NAME" in
msfconsole|msfvenom|msfd|msfdb|msfrpc|msfrpcd)
exec ruby "\$METASPLOIT_PATH/\$SCRIPT_NAME" "\$@"
;;
*)
echo "[!] Unknown Metasploit command '\$SCRIPT_NAME'."
exit 1
;;

esac
OF
chmod +x $PREFIX/bin/msfconsole
ln -fs $(type -P msfconsole) $PREFIX/bin/msfvenom
ln -fs $(type -P msfconsole) $PREFIX/bin/msfdb
ln -fs $(type -P msfconsole) $PREFIX/bin/msfd
ln -fs $(type -P msfconsole) $PREFIX/bin/msfrpc
ln -fs $(type -P msfconsole) $PREFIX/bin/msfrpcd
#
#	END
#
clear
banner
echo -e "\n\n${YELOW}[✓] ${AGUA}Run: ${GREEN}[ msfconsole ] ${YELOW}${FORT}\n\n"
}
# End
Uninstall_MSF()
{
	# Uninstall Metasploit
	printf "\n${RED} Uninstall Metasploit ${FORT}\n"
	apt remove --purge postgresql ruby wget2 
	rm -rf $CONFIG/* && rm -rf $PREFIX/bin/msf* && rm -rf $PREFIX/opt/metasploit-*
	sleep 2
	printf "\n${YELOW} [ Done! ]${FORT}\n\n"
}
HELP_MSF()
{
local -r X='\e[0;50;34m'
banner
printf "${AGUA}Options\n${GREEN}%-12s ${YELOW}: ${WHITE}Install Metasploit-Framework\n${GREEN}%-12s ${YELOW}: ${WHITE}Uninstall Metasploit-Framework\n${GREEN}%-12s ${YELOW}: ${WHITE}Update metasploit to the latest version\n${FORT}" '--install' '--uninstall' '--update'
printf "\n${AGUA}Use:${WHITE}\n
$0 --install\n\n"
}
until [[ $1 ]]
do
	HELP_MSF
	exit 0
done
case $1 in
	\--install)
		Install_MSF 'Downloading Metasploit_Framework for Termux'
		;;
	\--uninstall)
		Uninstall_MSF
		;;
	\--update)
		cd $OLDPWD && git pull 
		[[ -f $CONFIG/$NAME ]] && Info_msf ' Metasploit-Framework ' '[Updated]' && exit 0
# change		
		#Install_MSF 'Updating Metasploit-Framework for Termux'
#installer && ./MSFinstaller --install
		#
		;;

	*)
		HELP_MSF
		;;
esac

